#### Python Flask (web framework)- SocketIO application created for event-driven Networking functionality in a Unity Game ####

####
The idea behind this was creating a SocketIO Server for terrain data so the server could generate the information needed
on the client to create a terrain map for a VR Game. I used SocketIO interfacing to be able to call procedures on both server
and client to create an expandable map as the user plays it. The server would store the terrain data in a relational-database
and then when a player is getting closer to the section of the map where more information would be needed in the LOD Group, 
the cleint would emit and server receive and callback.

The server also stores the local streaming data in a JSON structure (I have used both TinyDB and DynamoDB for this, just depends
on longevity of the data and whether I care about latency vs. storing.

The advantage of doing it this way gave me the ability to have users control the environment that they are in, as well as get
the feeling that they are in a HUGE territory. I liked a lot of games where the Server generates the map and kinds of objects/
enemies/etc in it, so they feel like they have a customizeable experience. 

This could work well for an kind of session-based multi-user space. Generating an index (could be xml, NoSQL table, json) that
stores the terrain and environment data in an easily compresssed, parsed structure gives the flexibility of device hardware and
connectivity. What I mean by this is, we can downgrade graphics, textures, and shader_variants on device specific builds, but
the server system remains exactly the same. This would let a GearVR have the same visual experience as a SteamVR, only with more
optimizations/sacrifices (lolz).

I'll show some of the events and emissions.
####

# utility functions #
def create_Player_Tran_Table():
  dT = datetime.now()
  id = uuid.uuid4()
  ptran = Table('ptran' + dT, schema = [
    HashKey(id),
    RangeKey(dT.strftime("%Y-%m-%d %H:%M:%S")),
    RangeKey('p_x'),
    RangeKey('p_y'),
    RangeKey('p_z'),
    RangeKey('r_x'),
    RangeKey('r_y'),
    RangeKey('r_z')
  ])
  return dT, id, ptran
 

def Parse_Player_Json(data):
  a = json.loads(json.dumps(data))
  p_x, p_y, p_z = a[1], a[2], a[3]
  r_x, r_y, r_z = a[4]. a[5], a[6]
  return p_x, p_y, p_z, r_x, r_y, r_z

# DynamoDB functions for writing Player Position using boto #
def ddb_player_writer(id, dT, p_x, p_y, p_z, r_x, r_y, r_z):
  p_Tran = Item(ptran, data={
      'p_x': p_x,
      'p_y': p_y,
      'p_z': p_z.
      'r_x': r_x,
      'r_y': r_y,
      'r_z': r_z
    }  
  )
  p_Tran.save()

# Normal RESTful routes for okay-with-latency calls #
@app.route('/cTt', methods='POST')
def create_Trans_Table():
  dT, id, ptran = create_Player_Tran_Table()
  return {'dT': dT, 'id': id}

# SocketIO transform listener
@socketio.on('pTt', namespace='/player')
def playerPosition(json):
  p_x, p_y, p_z, r_x, r_y, r_z = Parse_Player_Json(json)
  resp = ddb_player_writer(p_x, p_y, p_z, r_x, r_y, r_z)
  if resp is True:
    emit("p_Trans_s", json, broadcast=true)
  else:
    emit("p_Trans_e", json, broadcast=true)


### End Python SocketIO code (server-side) ####

####
Not a lot there, I'm summing up work I did, but gives an idea of my concepts with server to client interaction. 

Below is the relevant C# code in Unity for the above events. Uses one of my favorite libraries, BestHTTP. This also
uses LitJson to parse and serialize JSON objects.
####

SocketManager manager = new SocketManager(new Uri("whatever-your-server-uri-is-and-port"));

Socket base = manager.Socket;

// the correct namespace:
Socket player = manager["/player"]

// create JSON like string using SimpleJSON
string CreateTransformJsonString(string id, string p_x, string p_y, string p_z, string r_x, string r_y, string r_z)
    {
        JSONNode transData = new JSONArray();
        transData.Add(id);
        transData.Add(p_x);
        transData.Add(p_y);
        transData.Add(p_z);
        transData.Add(r_x);
        transData.Add(r_y);
        transData.Add(r_z);
        return transData.ToString();
    }

// called in a coroutine
void OnPlayerTransform(Socket s, Packet p, params object[] args)
{
  Vector3 curr_Trans = player.transform.position;
  Vector3 curr_Rot = player.transform.rotation.eulerAngles;
  
  string data = CreateTransformJsonString(curr_Trans.x, curr_Trans.y, curr_Trans.z, curr_Rot.x, curr_Rot.y, curr_Rot.z);
  
  manager.Socket.Emit("pTt", data);
}

